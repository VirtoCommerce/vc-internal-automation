{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "logicAppName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "logicAppLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2",
        "koreacentral",
        "koreasouth",
        "francecentral",
        "francesouth",
        "uaecentral",
        "southafricanorth",
        "southafricawest"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    },
    "jira_instance": {
      "type": "string",
      "metadata": {
        "description": "The url where your JIRA instance is hosted (must support https). "
      }
    },
    "jira_username": {
      "type": "string",
      "metadata": {
        "description": "Your JIRA username."
      }
    },
    "jira_password": {
      "type": "securestring",
      "metadata": {
        "description": "Your API token (https://id.atlassian.com/manage/api-tokens)."
      }
    },
    "github_api_instance": {
      "type": "string",
      "defaultValue": "https://api.github.com",
      "metadata": {
        "description": "GitHub API URI."
      }
    },
    "github_username": {
      "type": "string",
      "metadata": {
        "description": "Your JIRA username."
      }
    },
    "github_password": {
      "type": "securestring",
      "metadata": {
        "description": "Your API token (https://github.com/settings/tokens)."
      }
    },
    "connections": {
      "type": "object"
    },
    "jira_Connection_Name": {
      "type": "string",
      "defaultValue": "jira"
    },
    "jira_Connection_DisplayName": {
      "type": "string",
      "defaultValue": "vc-internal-automation"
    }
  },
  "variables": {
    "github_query_uri": "org%3AVirtoCommerce+NOT+vc-docker+type%3Aissue+is%3Aopen+created%3A>%3D2020-03-01&type=Issues",
    "backlog_jql": "project = \"VP\" AND createdDate>=2020-01-01",
    "jira_issuetype": "10006",
    "jira_project": "VP"
  },
  "resources": [
    {
      "apiVersion": "2017-07-01",
      "location": "[parameters('logicAppLocation')]",
      "name": "[parameters('logicAppName')]",
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "For_each_GitHub_Issue": {
              "type": "Foreach",
              "foreach": "@variables('GitHubIssuesVar')",
              "actions": {
                "Add_comment_that_issue_created": {
                  "type": "Http",
                  "inputs": {
                    "method": "POST",
                    "uri": "@{item().url}/comments",
                    "headers": {
                      "Authorization": "@{parameters('github_authorization_header')}"
                    },
                    "body": {
                      "body": "Task @{parameters('jira_instance')}/browse/@{body('Create_a_new_issue')?['key']} has been created"
                    }
                  },
                  "runAfter": {
                    "Create_a_new_issue": [
                      "Succeeded"
                    ]
                  }
                },
                "Create_a_new_issue": {
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['jira_1']['connectionId']"
                      }
                    },
                    "method": "post",
                    "body": {
                      "fields": {
                        "issuetype": {
                          "id": "@parameters('jira_issuetype')"
                        },
                        "summary": "@if(greater(length(items('For_each_GitHub_Issue')['title']),255),substring(items('For_each_GitHub_Issue')['title'], 0, 255), items('For_each_GitHub_Issue')['title'])",
                        "description": "GitHub link: [@{item().html_url}|@{item().html_url}]\n\n======= Description from GitHub =======\n@{if(greater(length(item().body),2000),substring(item().body,0,2000),item().body)}",
                        "labels": "Github,Operations"
                      }
                    },
                    "path": "/issue",
                    "queries": {
                      "projectKey": "@parameters('jira_project')"
                    }
                  },
                  "runAfter": {}
                }
              },
              "runAfter": {
                "Keep_new_Github_Issues": [
                  "Succeeded"
                ]
              }
            },
            "GITHUBISSUES": {
              "type": "Http",
              "inputs": {
                "method": "GET",
                "uri": "@{concat(parameters('github_api_instance'), '/search/issues?q=', parameters('github_query_uri'))}"
              },
              "runAfter": {}
            },
            "Initialize_GitHubIssuesVar": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "GitHubIssuesVar",
                    "type": "array",
                    "value": "@body('GITHUBISSUES')['items']"
                  }
                ]
              },
              "runAfter": {
                "GITHUBISSUES": [
                  "Succeeded"
                ]
              }
            },
            "Initialize_JQL": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "JQL",
                    "type": "string",
                    "value": ""
                  }
                ]
              },
              "runAfter": {
                "Initialize_GitHubIssuesVar": [
                  "Succeeded"
                ]
              }
            },
            "Keep_new_Github_Issues": {
              "type": "Scope",
              "actions": {
                "Filter_array": {
                  "type": "Query",
                  "inputs": {
                    "from": "@variables('GitHubIssuesVar')",
                    "where": "@not(contains(body('Join_Jira_Descriptions'), item()['html_url']))"
                  },
                  "runAfter": {
                    "Join_Jira_Descriptions": [
                      "Succeeded"
                    ]
                  }
                },
                "GETJIRAISSUES": {
                  "type": "Http",
                  "inputs": {
                    "method": "POST",
                    "uri": "@{parameters('jira_instance')}/rest/api/2/search",
                    "headers": {
                      "Authorization": "@{parameters('jira_authorization_header')}",
                      "Content-Type": "application/json;charset=UTF-8"
                    },
                    "body": {
                      "fields": [
                        "description"
                      ],
                      "jql": "@{concat(parameters('backlog_jql'), ' AND (description ~ ', body('Join_GitHub_URIs'), ')')}"
                    }
                  },
                  "runAfter": {
                    "Join_GitHub_URIs": [
                      "Succeeded"
                    ]
                  }
                },
                "Join_GitHub_URIs": {
                  "type": "Join",
                  "inputs": {
                    "from": "@body('Select_GitHub_URIs')",
                    "joinWith": " OR description ~ "
                  },
                  "runAfter": {
                    "Select_GitHub_URIs": [
                      "Succeeded"
                    ]
                  }
                },
                "Join_Jira_Descriptions": {
                  "type": "Join",
                  "inputs": {
                    "from": "@body('Select_Jira_Descriptions')",
                    "joinWith": "-"
                  },
                  "runAfter": {
                    "Select_Jira_Descriptions": [
                      "Succeeded"
                    ]
                  }
                },
                "Select_GitHub_URIs": {
                  "type": "Select",
                  "inputs": {
                    "from": "@variables('GitHubIssuesVar')",
                    "select": "@concat('\"', item().html_url, '\"')"
                  },
                  "runAfter": {}
                },
                "Select_Jira_Descriptions": {
                  "type": "Select",
                  "inputs": {
                    "from": "@body('GETJIRAISSUES')['issues']",
                    "select": "@item().fields.description"
                  },
                  "runAfter": {
                    "GETJIRAISSUES": [
                      "Succeeded"
                    ]
                  }
                },
                "Set_GitHubIssuesVar": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "GitHubIssuesVar",
                    "value": "@body('Filter_array')"
                  },
                  "runAfter": {
                    "Filter_array": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "runAfter": {
                "Initialize_JQL": [
                  "Succeeded"
                ]
              }
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            },
            "jira_instance": {
              "type": "string"
            },
            "jira_authorization_header": {
              "type": "securestring"
            },
            "github_authorization_header": {
              "type": "securestring"
            },
            "backlog_jql": {
              "type": "string"
            },
            "jira_issuetype": {
              "type": "string"
            },
            "jira_project": {
              "type": "string"
            },
            "github_api_instance": {
              "type": "string"
            },
            "github_query_uri": {
              "type": "string"
            }
          },
          "triggers": {
            "Recurrence": {
              "type": "Recurrence",
              "recurrence": {
                "frequency": "Minute",
                "interval": 30
              }
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "jira_1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'jira')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('jira_Connection_Name'))]",
                "connectionName": "[parameters('jira_Connection_Name')]"
              }
            }
          },
          "jira_instance": {
            "value": "[parameters('jira_instance')]"
          },
          "jira_authorization_header": {
            "value": "[concat('Basic ', base64(concat(parameters('jira_username'), ':', parameters('jira_password'))))]"
          },
          "github_authorization_header": {
            "value": "[concat('Basic ', base64(concat(parameters('github_username'), ':', parameters('github_password'))))]"
          },
          "backlog_jql": {
            "value": "[variables('backlog_jql')]"
          },
          "jira_issuetype": {
            "value": "[variables('jira_issuetype')]"
          },
          "jira_project": {
            "value": "[variables('jira_project')]"
          },
          "github_api_instance": {
            "value": "[parameters('github_api_instance')]"
          },
          "github_query_uri": {
            "value": "[variables('github_query_uri')]"
          }
        },
        "state": "Enabled"
      },
      "scale": null,
      "tags": {
        "displayName": "LogicApp"
      },
      "type": "Microsoft.Logic/workflows",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('jira_Connection_Name'))]"
      ]
    },
    {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2018-07-01-preview",
      "name": "[parameters('jira_Connection_Name')]",
      "location": "[parameters('logicAppLocation')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'jira')]"
        },
        "displayName": "[parameters('jira_Connection_DisplayName')]",
        "parameterValues": {
          "jirainstance": "[parameters('jira_instance')]",
          "username": "[parameters('jira_username')]",
          "password": "[parameters('jira_password')]"
        }
      }
    }
  ]
}



